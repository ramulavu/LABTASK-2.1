# Initial Permutation (IP) Table (simplified)
IP = [58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4,
      62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5,
      63, 55, 47, 39, 31, 23, 15, 7, 56, 48, 40, 32, 24, 16, 8, 0]

# Final Permutation (FP) Table (simplified)
FP = [39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30,
      37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28,
      35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26]

# S-box (simplified for demonstration)
S_BOX = [
    [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
    [0, 15, 7, 4, 14, 2, 13, 1, 10, 11, 9, 5, 8, 12, 3, 6]
]

# Key Scheduling (simplified)
def generate_keys(key):
    # In reality, you would implement more steps to create the 16 round keys.
    # For simplicity, we're using the key directly here.
    return [key]

# Feistel Function (simplified)
def feistel_function(R, key):
    # Apply S-box and permute (this is highly simplified)
    return R

# Permute function (for IP and FP)
def permute(block, table):
    return [block[i] for i in table]

# DES encryption function
def des_encrypt(plaintext, key):
    # Initial permutation
    block = permute(plaintext, IP)
    
    # Split the block into left and right halves
    L, R = block[:32], block[32:]
    
    # 16 rounds of Feistel function
    for round_key in generate_keys(key):
        L, R = R, [x ^ y for x, y in zip(L, feistel_function(R, round_key))]
    
    # Combine halves and apply final permutation
    encrypted_block = permute(L + R, FP)
    return encrypted_block

# DES decryption function
def des_decrypt(ciphertext, key):
    # Initial permutation
    block = permute(ciphertext, IP)
    
    # Split the block into left and right halves
    L, R = block[:32], block[32:]
    
    # 16 rounds of Feistel function (reverse the key order)
    for round_key in reversed(generate_keys(key)):
        L, R = R, [x ^ y for x, y in zip(L, feistel_function(R, round_key))]
    
    # Combine halves and apply final permutation
    decrypted_block = permute(L + R, FP)
    return decrypted_block

# Example Usage:
key = [1] * 56  # 56-bit key (simplified, for demonstration)
plaintext = [0] * 64  # 64-bit plaintext (simplified, for demonstration)
ciphertext = des_encrypt(plaintext, key)
decrypted_text = des_decrypt(ciphertext, key)

print(f"Ciphertext: {ciphertext}")
print(f"Decrypted Text: {decrypted_text}")
